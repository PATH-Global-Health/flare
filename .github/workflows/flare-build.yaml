name: Build Flare Container & Push to DockerHub registry

on:
  workflow_call:
  workflow_dispatch:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test_flare_job:
    # Call the flare-test.yaml workflow and wait until it finishes testing
    uses: PATH-Global-Health/flare/.github/workflows/flare-test.yaml@main
  build:
    runs-on: ubuntu-latest
    # Complete test_flare_job before running build_lare_job
    needs: [test_flare_job]
    # env:
    #   SECRET_KEY: test-key-for-testing-only

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build container image
        working-directory: ./flare
        run: |
          docker buildx build \
            --platform linux/amd64 \
            -f Dockerfile.prod \
            -t belendia/flare:${GITHUB_SHA::7}-${GITHUB_RUN_ID::5} \
            -t belendia/flare:latest .
      - name: Push image
        run: |
          docker push belendia/flare --all-tags
      - name: Login to Linode Kubernetes Engine
        uses: Azure/k8s-set-context@v1
        with:
          method: kubeconfig
          kubeconfig: ${{ secrets.KUBE_CONFIG_JSON }}
      - name: Update deployment secrets
        run: |
          cat << EOF >> flare/.env.prod
          DEBUG=${{ secrets.DEBUG }}
          DB_NAME=${{ secrets.DB_NAME }}
          DB_USER=${{ secrets.DB_USER }}
          DB_PASSWORD=${{ secrets.DB_PASSWORD }}
          DB_HOST=${{ secrets.DB_HOST }}
          DB_PORT=${{ secrets.DB_PORT }}
          REDIS_URL=${{ secrets.REDIS_URL }}
          REDIS_HOST=${{ secrets.REDIS_HOST }}
          REDIS_PORT=${{ secrets.REDIS_PORT }}
          KEY_EXPIRE_AFTER=${{ secrets.KEY_EXPIRE_AFTER }}
          INSTITUTE_NAME=${{ secrets.INSTITUTE_NAME }}
          MENU_ITEMS_SIZE=${{ secrets.MENU_ITEMS_SIZE }}
          SECRET_KEY=${{ secrets.SECRET_KEY }}
          DJANGO_SETTINGS_MODULE=${{ secrets.DJANGO_SETTINGS_MODULE }}
          LINODE_BUCKET=${{ secrets.LINODE_BUCKET }}
          LINODE_BUCKET_REGION=${{ secrets.LINODE_BUCKET_REGION }}
          LINODE_BUCKET_ACCESS_KEY=${{ secrets.LINODE_BUCKET_ACCESS_KEY }}
          LINODE_BUCKET_SECRET_KEY=${{ secrets.LINODE_BUCKET_SECRET_KEY }}
          EOF
          kubectl delete secret flare-secret --ignore-not-found
          kubectl create secret generic flare-secret --from-env-file=flare/.env.prod
      - name: Update Deployment image
        run: |
          kubectl set image deployment/flare-deployment flare=belendia/flare:${GITHUB_SHA::7}-${GITHUB_RUN_ID::5}
      - name: Wait for rollout to finish
        run: |
          kubectl rollout status deployment/flare-deployment
      - name: Post-build Django Commands - Migrate / CollectStatic
        run: |
          export SINGLE_POD_NAME=$(kubectl get pod -l app=flare -o jsonpath="{.items[0].metadata.name}")
          kubectl exec -it $SINGLE_POD_NAME -- bash /flare/migrate.sh
          kubectl exec -it $SINGLE_POD_NAME -- bash /flare/collectstatic.sh
