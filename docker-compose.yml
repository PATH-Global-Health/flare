version: "3.1"

services:
  db:
    image: postgres:13-alpine
    environment:
      - POSTGRES_DB=flare
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres123882
    ports:
      - "5432:5432"
    restart: on-failure
    volumes:
      - /Users/belendia/.postgres_flare:/var/lib/postgresql/data
  # Redis
  redis:
    image: redis:6-alpine
    restart: on-failure

  web:
    container_name: flare_web
    build:
      context: .
      dockerfile: ./Dockerfile
    command: >
      sh -c "wait-for redis:6379 && wait-for db:5432 
      && python /code/manage.py collectstatic --no-input
      && python /code/manage.py makemigrations 
      && python /code/manage.py migrate  --noinput 
      && python /code/manage.py initadmin 
      && python /code/manage.py initsurvey 
      && python /code/manage.py initlang
      && python /code/manage.py initchannel
      && python /code/manage.py initconfig 
      && gunicorn config.wsgi -b 0.0.0.0:8000"
    volumes:
      - .:/code
      - ./staticfiles/admin:/usr/share/nginx/html/static/admin
      - ./staticfiles/rest_framework:/usr/share/nginx/html/static/rest_framework
    ports:
      - "8000:8000"
    depends_on:
      - db
      - redis
    restart: on-failure

  # Celery worker
  celery_worker:
    container_name: flare_celery_worker
    build:
      context: .
      dockerfile: ./Dockerfile
    command: >
      sh -c "wait-for redis:6379 && wait-for web:8000
      && celery -A config  worker -l info"
    volumes:
      - .:/code
    depends_on:
      - redis
      - web
    restart: on-failure
  # Celery worker
  celery_beat:
    container_name: flare_celery_beat
    build:
      context: .
      dockerfile: ./Dockerfile
    command: >
      sh -c "wait-for redis:6379 && wait-for web:8000
      && celery -A config beat -l INFO --scheduler django_celery_beat.schedulers:DatabaseScheduler"
    volumes:
      - .:/code
    depends_on:
      - redis
      - web
    restart: on-failure

  # ReactJS Frontend + Reverse Proxy for the web

  nginx:
    container_name: flare_nginx
    build:
      context: .
      dockerfile: ./flare_frontend/Dockerfile
    ports:
      - "8999:8999"
    # environment:
    #   - VIRTUAL_HOST=ussd.covid19.et
    #   - VIRTUAL_PORT=8999
    #- LETSENCRYPT_HOST=ussd.covid19.et
    #network_mode: "bridge"
    volumes:
      - ./staticfiles/admin:/usr/share/nginx/html/static/admin
      - ./staticfiles/rest_framework:/usr/share/nginx/html/static/rest_framework
    depends_on:
      - web